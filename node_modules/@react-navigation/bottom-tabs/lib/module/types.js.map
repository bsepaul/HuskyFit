{"version":3,"names":[],"sources":["types.tsx"],"sourcesContent":["import type { HeaderOptions } from '@react-navigation/elements';\nimport type {\n  Descriptor,\n  NavigationHelpers,\n  NavigationProp,\n  ParamListBase,\n  RouteProp,\n  TabActionHelpers,\n  TabNavigationState,\n} from '@react-navigation/native';\nimport type * as React from 'react';\nimport type {\n  Animated,\n  GestureResponderEvent,\n  StyleProp,\n  TextStyle,\n  TouchableWithoutFeedbackProps,\n  ViewStyle,\n} from 'react-native';\nimport type { EdgeInsets } from 'react-native-safe-area-context';\n\nexport type Layout = { width: number; height: number };\n\nexport type BottomTabNavigationEventMap = {\n  /**\n   * Event which fires on tapping on the tab in the tab bar.\n   */\n  tabPress: { data: undefined; canPreventDefault: true };\n  /**\n   * Event which fires on long press on the tab in the tab bar.\n   */\n  tabLongPress: { data: undefined };\n};\n\nexport type LabelPosition = 'beside-icon' | 'below-icon';\n\nexport type BottomTabNavigationHelpers = NavigationHelpers<\n  ParamListBase,\n  BottomTabNavigationEventMap\n> &\n  TabActionHelpers<ParamListBase>;\n\nexport type BottomTabNavigationProp<\n  ParamList extends ParamListBase,\n  RouteName extends keyof ParamList = keyof ParamList,\n  NavigatorID extends string | undefined = undefined\n> = NavigationProp<\n  ParamList,\n  RouteName,\n  NavigatorID,\n  TabNavigationState<ParamList>,\n  BottomTabNavigationOptions,\n  BottomTabNavigationEventMap\n> &\n  TabActionHelpers<ParamList>;\n\nexport type BottomTabScreenProps<\n  ParamList extends ParamListBase,\n  RouteName extends keyof ParamList = keyof ParamList,\n  NavigatorID extends string | undefined = undefined\n> = {\n  navigation: BottomTabNavigationProp<ParamList, RouteName, NavigatorID>;\n  route: RouteProp<ParamList, RouteName>;\n};\n\nexport type TimingKeyboardAnimationConfig = {\n  animation: 'timing';\n  config?: Omit<\n    Partial<Animated.TimingAnimationConfig>,\n    'toValue' | 'useNativeDriver'\n  >;\n};\n\nexport type SpringKeyboardAnimationConfig = {\n  animation: 'spring';\n  config?: Omit<\n    Partial<Animated.SpringAnimationConfig>,\n    'toValue' | 'useNativeDriver'\n  >;\n};\n\nexport type TabBarVisibilityAnimationConfig =\n  | TimingKeyboardAnimationConfig\n  | SpringKeyboardAnimationConfig;\n\nexport type BottomTabNavigationOptions = HeaderOptions & {\n  /**\n   * Title text for the screen.\n   */\n  title?: string;\n\n  /**\n   * Title string of a tab displayed in the tab bar\n   * or a function that given { focused: boolean, color: string, position: 'below-icon' | 'beside-icon', children: string } returns a React.Node to display in tab bar.\n   *\n   * When undefined, scene title is used. Use `tabBarShowLabel` to hide the label.\n   */\n  tabBarLabel?:\n    | string\n    | ((props: {\n        focused: boolean;\n        color: string;\n        position: LabelPosition;\n        children: string;\n      }) => React.ReactNode);\n\n  /**\n   * Whether the tab label should be visible. Defaults to `true`.\n   */\n  tabBarShowLabel?: boolean;\n\n  /**\n   * Whether the label is shown below the icon or beside the icon.\n   *\n   * - `below-icon`: the label is shown below the icon (typical for iPhones)\n   * - `beside-icon` the label is shown next to the icon (typical for iPad)\n   *\n   * By default, the position is chosen automatically based on device width.\n   */\n  tabBarLabelPosition?: LabelPosition;\n\n  /**\n   * Style object for the tab label.\n   */\n  tabBarLabelStyle?: StyleProp<TextStyle>;\n\n  /**\n   * Whether label font should scale to respect Text Size accessibility settings.\n   */\n  tabBarAllowFontScaling?: boolean;\n\n  /**\n   * A function that given { focused: boolean, color: string } returns a React.Node to display in the tab bar.\n   */\n  tabBarIcon?: (props: {\n    focused: boolean;\n    color: string;\n    size: number;\n  }) => React.ReactNode;\n\n  /**\n   * Style object for the tab icon.\n   */\n  tabBarIconStyle?: StyleProp<TextStyle>;\n\n  /**\n   * Text to show in a badge on the tab icon.\n   */\n  tabBarBadge?: number | string;\n\n  /**\n   * Custom style for the tab bar badge.\n   * You can specify a background color or text color here.\n   */\n  tabBarBadgeStyle?: StyleProp<TextStyle>;\n\n  /**\n   * Accessibility label for the tab button. This is read by the screen reader when the user taps the tab.\n   * It's recommended to set this if you don't have a label for the tab.\n   */\n  tabBarAccessibilityLabel?: string;\n\n  /**\n   * ID to locate this tab button in tests.\n   */\n  tabBarTestID?: string;\n\n  /**\n   * Function which returns a React element to render as the tab bar button.\n   * Renders `Pressable` by default.\n   */\n  tabBarButton?: (props: BottomTabBarButtonProps) => React.ReactNode;\n\n  /**\n   * Color for the icon and label in the active tab.\n   */\n  tabBarActiveTintColor?: string;\n\n  /**\n   * Color for the icon and label in the inactive tabs.\n   */\n  tabBarInactiveTintColor?: string;\n\n  /**\n   * Background color for the active tab.\n   */\n  tabBarActiveBackgroundColor?: string;\n\n  /**\n   * Background color for the inactive tabs.\n   */\n  tabBarInactiveBackgroundColor?: string;\n\n  /**\n   * Style object for the tab item container.\n   */\n  tabBarItemStyle?: StyleProp<ViewStyle>;\n\n  /**\n   * Whether the tab bar gets hidden when the keyboard is shown. Defaults to `false`.\n   */\n  tabBarHideOnKeyboard?: boolean;\n\n  /**\n   * Animation config for showing and hiding the tab bar when the keyboard is shown/hidden.\n   */\n  tabBarVisibilityAnimationConfig?: {\n    show?: TabBarVisibilityAnimationConfig;\n    hide?: TabBarVisibilityAnimationConfig;\n  };\n\n  /**\n   * Style object for the tab bar container.\n   */\n  tabBarStyle?: Animated.WithAnimatedValue<StyleProp<ViewStyle>>;\n\n  /**\n   * Function which returns a React Element to use as background for the tab bar.\n   * You could render an image, a gradient, blur view etc.\n   *\n   * When using `BlurView`, make sure to set `position: 'absolute'` in `tabBarStyle` as well.\n   * You'd also need to use `useBottomTabBarHeight()` to add a bottom padding to your content.\n   */\n  tabBarBackground?: () => React.ReactNode;\n\n  /**\n   * Whether this screens should render the first time it's accessed. Defaults to `true`.\n   * Set it to `false` if you want to render the screen on initial render.\n   */\n  lazy?: boolean;\n\n  /**\n   * Function that given returns a React Element to display as a header.\n   */\n  header?: (props: BottomTabHeaderProps) => React.ReactNode;\n\n  /**\n   * Whether to show the header. Setting this to `false` hides the header.\n   * Defaults to `true`.\n   */\n  headerShown?: boolean;\n\n  /**\n   * Whether this screen should be unmounted when navigating away from it.\n   * Defaults to `false`.\n   */\n  unmountOnBlur?: boolean;\n\n  /**\n   * Whether inactive screens should be suspended from re-rendering. Defaults to `false`.\n   * Defaults to `true` when `enableFreeze()` is run at the top of the application.\n   * Requires `react-native-screens` version >=3.16.0.\n   *\n   * Only supported on iOS and Android.\n   */\n  freezeOnBlur?: boolean;\n};\n\nexport type BottomTabDescriptor = Descriptor<\n  BottomTabNavigationOptions,\n  BottomTabNavigationProp<ParamListBase>,\n  RouteProp<ParamListBase>\n>;\n\nexport type BottomTabDescriptorMap = Record<string, BottomTabDescriptor>;\n\nexport type BottomTabNavigationConfig = {\n  /**\n   * Function that returns a React element to display as the tab bar.\n   */\n  tabBar?: (props: BottomTabBarProps) => React.ReactNode;\n  /**\n   * Safe area insets for the tab bar. This is used to avoid elements like the navigation bar on Android and bottom safe area on iOS.\n   * By default, the device's safe area insets are automatically detected. You can override the behavior with this option.\n   */\n  safeAreaInsets?: {\n    top?: number;\n    right?: number;\n    bottom?: number;\n    left?: number;\n  };\n  /**\n   * Whether inactive screens should be detached from the view hierarchy to save memory.\n   * Make sure to call `enableScreens` from `react-native-screens` to make it work.\n   * Defaults to `true` on Android.\n   */\n  detachInactiveScreens?: boolean;\n  /**\n   * Style object for the component wrapping the screen content.\n   */\n  sceneContainerStyle?: StyleProp<ViewStyle>;\n};\n\nexport type BottomTabHeaderProps = {\n  /**\n   * Layout of the screen.\n   */\n  layout: Layout;\n  /**\n   * Options for the current screen.\n   */\n  options: BottomTabNavigationOptions;\n  /**\n   * Route object for the current screen.\n   */\n  route: RouteProp<ParamListBase>;\n  /**\n   * Navigation prop for the header.\n   */\n  navigation: BottomTabNavigationProp<ParamListBase>;\n};\n\nexport type BottomTabBarProps = {\n  state: TabNavigationState<ParamListBase>;\n  descriptors: BottomTabDescriptorMap;\n  navigation: NavigationHelpers<ParamListBase, BottomTabNavigationEventMap>;\n  insets: EdgeInsets;\n};\n\nexport type BottomTabBarButtonProps = Omit<\n  TouchableWithoutFeedbackProps,\n  'onPress'\n> & {\n  to?: string;\n  children: React.ReactNode;\n  onPress?: (\n    e: React.MouseEvent<HTMLAnchorElement, MouseEvent> | GestureResponderEvent\n  ) => void;\n};\n"],"mappings":""}