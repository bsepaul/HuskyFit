{"version":3,"names":["PrivateValueStore","isValidKey","key","undefined","getRouteConfigsFromChildren","children","groupKey","groupOptions","configs","React","Children","toArray","reduce","acc","child","isValidElement","type","Screen","props","navigationKey","Error","JSON","stringify","name","push","keys","options","Fragment","Group","screenOptions","String","process","env","NODE_ENV","forEach","config","component","getComponent","isValidElementType","console","warn","test","useNavigationBuilder","createRouter","navigatorKey","useRegisterNavigator","route","useContext","NavigationRouteContext","screenListeners","rest","current","router","useRef","params","state","initial","screen","initialRouteName","routeConfigs","screens","routeNames","map","routeKeyList","curr","join","routeParamList","initialParams","routeGetIdList","Object","assign","getId","length","isStateValid","useCallback","isStateInitialized","stale","currentState","getState","getCurrentState","setState","setCurrentState","setKey","getKey","getIsInitial","NavigationStateContext","stateCleanedUp","cleanUpState","initializedState","isFirstStateInitialization","useMemo","initialRouteParamList","initialParamsFromParams","getInitialState","getRehydratedState","previousRouteKeyListRef","useEffect","previousRouteKeyList","nextState","isArrayEqual","isRecordEqual","getStateForRouteNamesChange","routeKeyChanges","filter","hasOwnProperty","previousNestedParamsRef","previousParams","action","CommonActions","reset","navigate","path","updatedState","getStateForAction","shouldUpdate","useScheduleUpdate","setTimeout","initializedStateRef","emitter","useEventEmitter","e","target","routes","find","index","navigation","descriptors","listeners","concat","cb","i","self","lastIndexOf","listener","useFocusEvents","emit","data","childListeners","addListener","useChildListeners","keyedListeners","addKeyedListener","useKeyedChildListeners","onAction","useOnAction","actionListeners","beforeRemoveListeners","beforeRemove","routerConfigOptions","onRouteFocus","useOnRouteFocus","useNavigationHelpers","id","useFocusedListenersChildrenAdapter","focusedListeners","focus","useOnGetState","getStateListeners","useDescriptors","defaultScreenOptions","useCurrentRender","NavigationContent","useComponent"],"sources":["useNavigationBuilder.tsx"],"sourcesContent":["import {\n  CommonActions,\n  DefaultRouterOptions,\n  NavigationAction,\n  NavigationState,\n  ParamListBase,\n  PartialState,\n  Route,\n  Router,\n  RouterConfigOptions,\n  RouterFactory,\n} from '@react-navigation/routers';\nimport * as React from 'react';\nimport { isValidElementType } from 'react-is';\n\nimport Group from './Group';\nimport isArrayEqual from './isArrayEqual';\nimport isRecordEqual from './isRecordEqual';\nimport NavigationHelpersContext from './NavigationHelpersContext';\nimport NavigationRouteContext from './NavigationRouteContext';\nimport NavigationStateContext from './NavigationStateContext';\nimport PreventRemoveProvider from './PreventRemoveProvider';\nimport Screen from './Screen';\nimport {\n  DefaultNavigatorOptions,\n  EventMapBase,\n  EventMapCore,\n  NavigatorScreenParams,\n  PrivateValueStore,\n  RouteConfig,\n} from './types';\nimport useChildListeners from './useChildListeners';\nimport useComponent from './useComponent';\nimport useCurrentRender from './useCurrentRender';\nimport useDescriptors, { ScreenConfigWithParent } from './useDescriptors';\nimport useEventEmitter from './useEventEmitter';\nimport useFocusedListenersChildrenAdapter from './useFocusedListenersChildrenAdapter';\nimport useFocusEvents from './useFocusEvents';\nimport useKeyedChildListeners from './useKeyedChildListeners';\nimport useNavigationHelpers from './useNavigationHelpers';\nimport useOnAction from './useOnAction';\nimport useOnGetState from './useOnGetState';\nimport useOnRouteFocus from './useOnRouteFocus';\nimport useRegisterNavigator from './useRegisterNavigator';\nimport useScheduleUpdate from './useScheduleUpdate';\n\n// This is to make TypeScript compiler happy\n// eslint-disable-next-line babel/no-unused-expressions\nPrivateValueStore;\n\ntype NavigatorRoute<State extends NavigationState> = {\n  key: string;\n  params?: NavigatorScreenParams<ParamListBase, State>;\n};\n\nconst isValidKey = (key: unknown) =>\n  key === undefined || (typeof key === 'string' && key !== '');\n\n/**\n * Extract route config object from React children elements.\n *\n * @param children React Elements to extract the config from.\n */\nconst getRouteConfigsFromChildren = <\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends EventMapBase\n>(\n  children: React.ReactNode,\n  groupKey?: string,\n  groupOptions?: ScreenConfigWithParent<\n    State,\n    ScreenOptions,\n    EventMap\n  >['options']\n) => {\n  const configs = React.Children.toArray(children).reduce<\n    ScreenConfigWithParent<State, ScreenOptions, EventMap>[]\n  >((acc, child) => {\n    if (React.isValidElement(child)) {\n      if (child.type === Screen) {\n        // We can only extract the config from `Screen` elements\n        // If something else was rendered, it's probably a bug\n\n        if (!isValidKey(child.props.navigationKey)) {\n          throw new Error(\n            `Got an invalid 'navigationKey' prop (${JSON.stringify(\n              child.props.navigationKey\n            )}) for the screen '${\n              child.props.name\n            }'. It must be a non-empty string or 'undefined'.`\n          );\n        }\n\n        acc.push({\n          keys: [groupKey, child.props.navigationKey],\n          options: groupOptions,\n          props: child.props as RouteConfig<\n            ParamListBase,\n            string,\n            State,\n            ScreenOptions,\n            EventMap\n          >,\n        });\n        return acc;\n      }\n\n      if (child.type === React.Fragment || child.type === Group) {\n        if (!isValidKey(child.props.navigationKey)) {\n          throw new Error(\n            `Got an invalid 'navigationKey' prop (${JSON.stringify(\n              child.props.navigationKey\n            )}) for the group. It must be a non-empty string or 'undefined'.`\n          );\n        }\n\n        // When we encounter a fragment or group, we need to dive into its children to extract the configs\n        // This is handy to conditionally define a group of screens\n        acc.push(\n          ...getRouteConfigsFromChildren<State, ScreenOptions, EventMap>(\n            child.props.children,\n            child.props.navigationKey,\n            child.type !== Group\n              ? groupOptions\n              : groupOptions != null\n              ? [...groupOptions, child.props.screenOptions]\n              : [child.props.screenOptions]\n          )\n        );\n        return acc;\n      }\n    }\n\n    throw new Error(\n      `A navigator can only contain 'Screen', 'Group' or 'React.Fragment' as its direct children (found ${\n        React.isValidElement(child)\n          ? `'${\n              typeof child.type === 'string' ? child.type : child.type?.name\n            }'${\n              child.props?.name ? ` for the screen '${child.props.name}'` : ''\n            }`\n          : typeof child === 'object'\n          ? JSON.stringify(child)\n          : `'${String(child)}'`\n      }). To render this component in the navigator, pass it in the 'component' prop to 'Screen'.`\n    );\n  }, []);\n\n  if (process.env.NODE_ENV !== 'production') {\n    configs.forEach((config) => {\n      const { name, children, component, getComponent } = config.props;\n\n      if (typeof name !== 'string' || !name) {\n        throw new Error(\n          `Got an invalid name (${JSON.stringify(\n            name\n          )}) for the screen. It must be a non-empty string.`\n        );\n      }\n\n      if (\n        children != null ||\n        component !== undefined ||\n        getComponent !== undefined\n      ) {\n        if (children != null && component !== undefined) {\n          throw new Error(\n            `Got both 'component' and 'children' props for the screen '${name}'. You must pass only one of them.`\n          );\n        }\n\n        if (children != null && getComponent !== undefined) {\n          throw new Error(\n            `Got both 'getComponent' and 'children' props for the screen '${name}'. You must pass only one of them.`\n          );\n        }\n\n        if (component !== undefined && getComponent !== undefined) {\n          throw new Error(\n            `Got both 'component' and 'getComponent' props for the screen '${name}'. You must pass only one of them.`\n          );\n        }\n\n        if (children != null && typeof children !== 'function') {\n          throw new Error(\n            `Got an invalid value for 'children' prop for the screen '${name}'. It must be a function returning a React Element.`\n          );\n        }\n\n        if (component !== undefined && !isValidElementType(component)) {\n          throw new Error(\n            `Got an invalid value for 'component' prop for the screen '${name}'. It must be a valid React Component.`\n          );\n        }\n\n        if (getComponent !== undefined && typeof getComponent !== 'function') {\n          throw new Error(\n            `Got an invalid value for 'getComponent' prop for the screen '${name}'. It must be a function returning a React Component.`\n          );\n        }\n\n        if (typeof component === 'function') {\n          if (component.name === 'component') {\n            // Inline anonymous functions passed in the `component` prop will have the name of the prop\n            // It's relatively safe to assume that it's not a component since it should also have PascalCase name\n            // We won't catch all scenarios here, but this should catch a good chunk of incorrect use.\n            console.warn(\n              `Looks like you're passing an inline function for 'component' prop for the screen '${name}' (e.g. component={() => <SomeComponent />}). Passing an inline function will cause the component state to be lost on re-render and cause perf issues since it's re-created every render. You can pass the function as children to 'Screen' instead to achieve the desired behaviour.`\n            );\n          } else if (/^[a-z]/.test(component.name)) {\n            console.warn(\n              `Got a component with the name '${component.name}' for the screen '${name}'. React Components must start with an uppercase letter. If you're passing a regular function and not a component, pass it as children to 'Screen' instead. Otherwise capitalize your component's name.`\n            );\n          }\n        }\n      } else {\n        throw new Error(\n          `Couldn't find a 'component', 'getComponent' or 'children' prop for the screen '${name}'. This can happen if you passed 'undefined'. You likely forgot to export your component from the file it's defined in, or mixed up default import and named import when importing.`\n        );\n      }\n    });\n  }\n\n  return configs;\n};\n\n/**\n * Hook for building navigators.\n *\n * @param createRouter Factory method which returns router object.\n * @param options Options object containing `children` and additional options for the router.\n * @returns An object containing `state`, `navigation`, `descriptors` objects.\n */\nexport default function useNavigationBuilder<\n  State extends NavigationState,\n  RouterOptions extends DefaultRouterOptions,\n  ActionHelpers extends Record<string, () => void>,\n  ScreenOptions extends {},\n  EventMap extends Record<string, any>\n>(\n  createRouter: RouterFactory<State, any, RouterOptions>,\n  options: DefaultNavigatorOptions<\n    ParamListBase,\n    State,\n    ScreenOptions,\n    EventMap\n  > &\n    RouterOptions\n) {\n  const navigatorKey = useRegisterNavigator();\n\n  const route = React.useContext(NavigationRouteContext) as\n    | NavigatorRoute<State>\n    | undefined;\n\n  const { children, screenListeners, ...rest } = options;\n  const { current: router } = React.useRef<Router<State, any>>(\n    createRouter({\n      ...(rest as unknown as RouterOptions),\n      ...(route?.params &&\n      route.params.state == null &&\n      route.params.initial !== false &&\n      typeof route.params.screen === 'string'\n        ? { initialRouteName: route.params.screen }\n        : null),\n    })\n  );\n\n  const routeConfigs = getRouteConfigsFromChildren<\n    State,\n    ScreenOptions,\n    EventMap\n  >(children);\n\n  const screens = routeConfigs.reduce<\n    Record<string, ScreenConfigWithParent<State, ScreenOptions, EventMap>>\n  >((acc, config) => {\n    if (config.props.name in acc) {\n      throw new Error(\n        `A navigator cannot contain multiple 'Screen' components with the same name (found duplicate screen named '${config.props.name}')`\n      );\n    }\n\n    acc[config.props.name] = config;\n    return acc;\n  }, {});\n\n  const routeNames = routeConfigs.map((config) => config.props.name);\n  const routeKeyList = routeNames.reduce<Record<string, React.Key | undefined>>(\n    (acc, curr) => {\n      acc[curr] = screens[curr].keys.map((key) => key ?? '').join(':');\n      return acc;\n    },\n    {}\n  );\n  const routeParamList = routeNames.reduce<Record<string, object | undefined>>(\n    (acc, curr) => {\n      const { initialParams } = screens[curr].props;\n      acc[curr] = initialParams;\n      return acc;\n    },\n    {}\n  );\n  const routeGetIdList = routeNames.reduce<\n    RouterConfigOptions['routeGetIdList']\n  >(\n    (acc, curr) =>\n      Object.assign(acc, {\n        [curr]: screens[curr].props.getId,\n      }),\n    {}\n  );\n\n  if (!routeNames.length) {\n    throw new Error(\n      \"Couldn't find any screens for the navigator. Have you defined any screens as its children?\"\n    );\n  }\n\n  const isStateValid = React.useCallback(\n    (state: NavigationState | PartialState<NavigationState>) =>\n      state.type === undefined || state.type === router.type,\n    [router.type]\n  );\n\n  const isStateInitialized = React.useCallback(\n    (state: NavigationState | PartialState<NavigationState> | undefined) =>\n      state !== undefined && state.stale === false && isStateValid(state),\n    [isStateValid]\n  );\n\n  const {\n    state: currentState,\n    getState: getCurrentState,\n    setState: setCurrentState,\n    setKey,\n    getKey,\n    getIsInitial,\n  } = React.useContext(NavigationStateContext);\n\n  const stateCleanedUp = React.useRef(false);\n\n  const cleanUpState = React.useCallback(() => {\n    setCurrentState(undefined);\n    stateCleanedUp.current = true;\n  }, [setCurrentState]);\n\n  const setState = React.useCallback(\n    (state: NavigationState | PartialState<NavigationState> | undefined) => {\n      if (stateCleanedUp.current) {\n        // State might have been already cleaned up due to unmount\n        // We do not want to expose API allowing to override this\n        // This would lead to old data preservation on main navigator unmount\n        return;\n      }\n      setCurrentState(state);\n    },\n    [setCurrentState]\n  );\n\n  const [initializedState, isFirstStateInitialization] = React.useMemo(() => {\n    const initialRouteParamList = routeNames.reduce<\n      Record<string, object | undefined>\n    >((acc, curr) => {\n      const { initialParams } = screens[curr].props;\n      const initialParamsFromParams =\n        route?.params?.state == null &&\n        route?.params?.initial !== false &&\n        route?.params?.screen === curr\n          ? route.params.params\n          : undefined;\n\n      acc[curr] =\n        initialParams !== undefined || initialParamsFromParams !== undefined\n          ? {\n              ...initialParams,\n              ...initialParamsFromParams,\n            }\n          : undefined;\n\n      return acc;\n    }, {});\n\n    // If the current state isn't initialized on first render, we initialize it\n    // We also need to re-initialize it if the state passed from parent was changed (maybe due to reset)\n    // Otherwise assume that the state was provided as initial state\n    // So we need to rehydrate it to make it usable\n    if (\n      (currentState === undefined || !isStateValid(currentState)) &&\n      route?.params?.state == null\n    ) {\n      return [\n        router.getInitialState({\n          routeNames,\n          routeParamList: initialRouteParamList,\n          routeGetIdList,\n        }),\n        true,\n      ];\n    } else {\n      return [\n        router.getRehydratedState(\n          route?.params?.state ?? (currentState as PartialState<State>),\n          {\n            routeNames,\n            routeParamList: initialRouteParamList,\n            routeGetIdList,\n          }\n        ),\n        false,\n      ];\n    }\n    // We explicitly don't include routeNames, route.params etc. in the dep list\n    // below. We want to avoid forcing a new state to be calculated in those cases\n    // Instead, we handle changes to these in the nextState code below. Note\n    // that some changes to routeConfigs are explicitly ignored, such as changes\n    // to initialParams\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [currentState, router, isStateValid]);\n\n  const previousRouteKeyListRef = React.useRef(routeKeyList);\n\n  React.useEffect(() => {\n    previousRouteKeyListRef.current = routeKeyList;\n  });\n\n  const previousRouteKeyList = previousRouteKeyListRef.current;\n\n  let state =\n    // If the state isn't initialized, or stale, use the state we initialized instead\n    // The state won't update until there's a change needed in the state we have initalized locally\n    // So it'll be `undefined` or stale until the first navigation event happens\n    isStateInitialized(currentState)\n      ? (currentState as State)\n      : (initializedState as State);\n\n  let nextState: State = state;\n\n  if (\n    !isArrayEqual(state.routeNames, routeNames) ||\n    !isRecordEqual(routeKeyList, previousRouteKeyList)\n  ) {\n    // When the list of route names change, the router should handle it to remove invalid routes\n    nextState = router.getStateForRouteNamesChange(state, {\n      routeNames,\n      routeParamList,\n      routeGetIdList,\n      routeKeyChanges: Object.keys(routeKeyList).filter(\n        (name) =>\n          previousRouteKeyList.hasOwnProperty(name) &&\n          routeKeyList[name] !== previousRouteKeyList[name]\n      ),\n    });\n  }\n\n  const previousNestedParamsRef = React.useRef(route?.params);\n\n  React.useEffect(() => {\n    previousNestedParamsRef.current = route?.params;\n  }, [route?.params]);\n\n  if (route?.params) {\n    const previousParams = previousNestedParamsRef.current;\n\n    let action: CommonActions.Action | undefined;\n\n    if (\n      typeof route.params.state === 'object' &&\n      route.params.state != null &&\n      route.params !== previousParams\n    ) {\n      // If the route was updated with new state, we should reset to it\n      action = CommonActions.reset(route.params.state);\n    } else if (\n      typeof route.params.screen === 'string' &&\n      ((route.params.initial === false && isFirstStateInitialization) ||\n        route.params !== previousParams)\n    ) {\n      // If the route was updated with new screen name and/or params, we should navigate there\n      action = CommonActions.navigate({\n        name: route.params.screen,\n        params: route.params.params,\n        path: route.params.path,\n      });\n    }\n\n    // The update should be limited to current navigator only, so we call the router manually\n    const updatedState = action\n      ? router.getStateForAction(nextState, action, {\n          routeNames,\n          routeParamList,\n          routeGetIdList,\n        })\n      : null;\n\n    nextState =\n      updatedState !== null\n        ? router.getRehydratedState(updatedState, {\n            routeNames,\n            routeParamList,\n            routeGetIdList,\n          })\n        : nextState;\n  }\n\n  const shouldUpdate = state !== nextState;\n\n  useScheduleUpdate(() => {\n    if (shouldUpdate) {\n      // If the state needs to be updated, we'll schedule an update\n      setState(nextState);\n    }\n  });\n\n  // The up-to-date state will come in next render, but we don't need to wait for it\n  // We can't use the outdated state since the screens have changed, which will cause error due to mismatched config\n  // So we override the state object we return to use the latest state as soon as possible\n  state = nextState;\n\n  React.useEffect(() => {\n    setKey(navigatorKey);\n\n    if (!getIsInitial()) {\n      // If it's not initial render, we need to update the state\n      // This will make sure that our container gets notifier of state changes due to new mounts\n      // This is necessary for proper screen tracking, URL updates etc.\n      setState(nextState);\n    }\n\n    return () => {\n      // We need to clean up state for this navigator on unmount\n      // We do it in a timeout because we need to detect if another navigator mounted in the meantime\n      // For example, if another navigator has started rendering, we should skip cleanup\n      // Otherwise, our cleanup step will cleanup state for the other navigator and re-initialize it\n      setTimeout(() => {\n        if (getCurrentState() !== undefined && getKey() === navigatorKey) {\n          cleanUpState();\n        }\n      }, 0);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // We initialize this ref here to avoid a new getState getting initialized\n  // whenever initializedState changes. We want getState to have access to the\n  // latest initializedState, but don't need it to change when that happens\n  const initializedStateRef = React.useRef<State>();\n  initializedStateRef.current = initializedState;\n\n  const getState = React.useCallback((): State => {\n    const currentState = getCurrentState();\n\n    return isStateInitialized(currentState)\n      ? (currentState as State)\n      : (initializedStateRef.current as State);\n  }, [getCurrentState, isStateInitialized]);\n\n  const emitter = useEventEmitter<EventMapCore<State>>((e) => {\n    let routeNames = [];\n\n    let route: Route<string> | undefined;\n\n    if (e.target) {\n      route = state.routes.find((route) => route.key === e.target);\n\n      if (route?.name) {\n        routeNames.push(route.name);\n      }\n    } else {\n      route = state.routes[state.index];\n      routeNames.push(\n        ...Object.keys(screens).filter((name) => route?.name === name)\n      );\n    }\n\n    if (route == null) {\n      return;\n    }\n\n    const navigation = descriptors[route.key].navigation;\n\n    const listeners = ([] as (((e: any) => void) | undefined)[])\n      .concat(\n        // Get an array of listeners for all screens + common listeners on navigator\n        ...[\n          screenListeners,\n          ...routeNames.map((name) => {\n            const { listeners } = screens[name].props;\n            return listeners;\n          }),\n        ].map((listeners) => {\n          const map =\n            typeof listeners === 'function'\n              ? listeners({ route: route as any, navigation })\n              : listeners;\n\n          return map\n            ? Object.keys(map)\n                .filter((type) => type === e.type)\n                .map((type) => map?.[type])\n            : undefined;\n        })\n      )\n      // We don't want same listener to be called multiple times for same event\n      // So we remove any duplicate functions from the array\n      .filter((cb, i, self) => cb && self.lastIndexOf(cb) === i);\n\n    listeners.forEach((listener) => listener?.(e));\n  });\n\n  useFocusEvents({ state, emitter });\n\n  React.useEffect(() => {\n    emitter.emit({ type: 'state', data: { state } });\n  }, [emitter, state]);\n\n  const { listeners: childListeners, addListener } = useChildListeners();\n\n  const { keyedListeners, addKeyedListener } = useKeyedChildListeners();\n\n  const onAction = useOnAction({\n    router,\n    getState,\n    setState,\n    key: route?.key,\n    actionListeners: childListeners.action,\n    beforeRemoveListeners: keyedListeners.beforeRemove,\n    routerConfigOptions: {\n      routeNames,\n      routeParamList,\n      routeGetIdList,\n    },\n    emitter,\n  });\n\n  const onRouteFocus = useOnRouteFocus({\n    router,\n    key: route?.key,\n    getState,\n    setState,\n  });\n\n  const navigation = useNavigationHelpers<\n    State,\n    ActionHelpers,\n    NavigationAction,\n    EventMap\n  >({\n    id: options.id,\n    onAction,\n    getState,\n    emitter,\n    router,\n  });\n\n  useFocusedListenersChildrenAdapter({\n    navigation,\n    focusedListeners: childListeners.focus,\n  });\n\n  useOnGetState({\n    getState,\n    getStateListeners: keyedListeners.getState,\n  });\n\n  const descriptors = useDescriptors<\n    State,\n    ActionHelpers,\n    ScreenOptions,\n    EventMap\n  >({\n    state,\n    screens,\n    navigation,\n    screenOptions: options.screenOptions,\n    defaultScreenOptions: options.defaultScreenOptions,\n    onAction,\n    getState,\n    setState,\n    onRouteFocus,\n    addListener,\n    addKeyedListener,\n    router,\n    // @ts-expect-error: this should have both core and custom events, but too much work right now\n    emitter,\n  });\n\n  useCurrentRender({\n    state,\n    navigation,\n    descriptors,\n  });\n\n  const NavigationContent = useComponent((children: React.ReactNode) => (\n    <NavigationHelpersContext.Provider value={navigation}>\n      <PreventRemoveProvider>{children}</PreventRemoveProvider>\n    </NavigationHelpersContext.Provider>\n  ));\n\n  return {\n    state,\n    navigation,\n    descriptors,\n    NavigationContent,\n  };\n}\n"],"mappings":"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"}