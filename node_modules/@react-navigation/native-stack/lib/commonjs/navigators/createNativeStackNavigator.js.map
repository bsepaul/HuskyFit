{"version":3,"names":["NativeStackNavigator","id","initialRouteName","children","screenListeners","screenOptions","rest","state","descriptors","navigation","NavigationContent","useNavigationBuilder","StackRouter","React","useEffect","addListener","e","isFocused","requestAnimationFrame","index","defaultPrevented","dispatch","StackActions","popToTop","target","key","createNavigatorFactory"],"sources":["createNativeStackNavigator.tsx"],"sourcesContent":["import {\n  createNavigatorFactory,\n  EventArg,\n  ParamListBase,\n  StackActionHelpers,\n  StackActions,\n  StackNavigationState,\n  StackRouter,\n  StackRouterOptions,\n  useNavigationBuilder,\n} from '@react-navigation/native';\nimport * as React from 'react';\n\nimport type {\n  NativeStackNavigationEventMap,\n  NativeStackNavigationOptions,\n  NativeStackNavigatorProps,\n} from '../types';\nimport NativeStackView from '../views/NativeStackView';\n\nfunction NativeStackNavigator({\n  id,\n  initialRouteName,\n  children,\n  screenListeners,\n  screenOptions,\n  ...rest\n}: NativeStackNavigatorProps) {\n  const { state, descriptors, navigation, NavigationContent } =\n    useNavigationBuilder<\n      StackNavigationState<ParamListBase>,\n      StackRouterOptions,\n      StackActionHelpers<ParamListBase>,\n      NativeStackNavigationOptions,\n      NativeStackNavigationEventMap\n    >(StackRouter, {\n      id,\n      initialRouteName,\n      children,\n      screenListeners,\n      screenOptions,\n    });\n\n  React.useEffect(\n    () =>\n      // @ts-expect-error: there may not be a tab navigator in parent\n      navigation?.addListener?.('tabPress', (e: any) => {\n        const isFocused = navigation.isFocused();\n\n        // Run the operation in the next frame so we're sure all listeners have been run\n        // This is necessary to know if preventDefault() has been called\n        requestAnimationFrame(() => {\n          if (\n            state.index > 0 &&\n            isFocused &&\n            !(e as EventArg<'tabPress', true>).defaultPrevented\n          ) {\n            // When user taps on already focused tab and we're inside the tab,\n            // reset the stack to replicate native behaviour\n            navigation.dispatch({\n              ...StackActions.popToTop(),\n              target: state.key,\n            });\n          }\n        });\n      }),\n    [navigation, state.index, state.key]\n  );\n\n  return (\n    <NavigationContent>\n      <NativeStackView\n        {...rest}\n        state={state}\n        navigation={navigation}\n        descriptors={descriptors}\n      />\n    </NavigationContent>\n  );\n}\n\nexport default createNavigatorFactory<\n  StackNavigationState<ParamListBase>,\n  NativeStackNavigationOptions,\n  NativeStackNavigationEventMap,\n  typeof NativeStackNavigator\n>(NativeStackNavigator);\n"],"mappings":";;;;;;;AAAA;;AAWA;;AAOA;;;;;;;;;;AAEA,SAASA,oBAAT,OAO8B;EAAA,IAPA;IAC5BC,EAD4B;IAE5BC,gBAF4B;IAG5BC,QAH4B;IAI5BC,eAJ4B;IAK5BC,aAL4B;IAM5B,GAAGC;EANyB,CAOA;EAC5B,MAAM;IAAEC,KAAF;IAASC,WAAT;IAAsBC,UAAtB;IAAkCC;EAAlC,IACJ,IAAAC,4BAAA,EAMEC,mBANF,EAMe;IACbX,EADa;IAEbC,gBAFa;IAGbC,QAHa;IAIbC,eAJa;IAKbC;EALa,CANf,CADF;EAeAQ,KAAK,CAACC,SAAN,CACE;IAAA;;IAAA,OACE;MACAL,UAFF,aAEEA,UAFF,gDAEEA,UAAU,CAAEM,WAFd,0DAEE,2BAAAN,UAAU,EAAgB,UAAhB,EAA6BO,CAAD,IAAY;QAChD,MAAMC,SAAS,GAAGR,UAAU,CAACQ,SAAX,EAAlB,CADgD,CAGhD;QACA;;QACAC,qBAAqB,CAAC,MAAM;UAC1B,IACEX,KAAK,CAACY,KAAN,GAAc,CAAd,IACAF,SADA,IAEA,CAAED,CAAD,CAAkCI,gBAHrC,EAIE;YACA;YACA;YACAX,UAAU,CAACY,QAAX,CAAoB,EAClB,GAAGC,oBAAA,CAAaC,QAAb,EADe;cAElBC,MAAM,EAAEjB,KAAK,CAACkB;YAFI,CAApB;UAID;QACF,CAboB,CAArB;MAcD,CAnBS;IAFZ;EAAA,CADF,EAuBE,CAAChB,UAAD,EAAaF,KAAK,CAACY,KAAnB,EAA0BZ,KAAK,CAACkB,GAAhC,CAvBF;EA0BA,oBACE,oBAAC,iBAAD,qBACE,oBAAC,wBAAD,eACMnB,IADN;IAEE,KAAK,EAAEC,KAFT;IAGE,UAAU,EAAEE,UAHd;IAIE,WAAW,EAAED;EAJf,GADF,CADF;AAUD;;eAEc,IAAAkB,8BAAA,EAKb1B,oBALa,C"}