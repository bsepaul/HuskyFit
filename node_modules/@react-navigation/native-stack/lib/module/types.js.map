{"version":3,"names":[],"sources":["types.tsx"],"sourcesContent":["import type {\n  DefaultNavigatorOptions,\n  Descriptor,\n  NavigationHelpers,\n  NavigationProp,\n  ParamListBase,\n  Route,\n  RouteProp,\n  StackActionHelpers,\n  StackNavigationState,\n  StackRouterOptions,\n} from '@react-navigation/native';\nimport type {\n  ImageSourcePropType,\n  StyleProp,\n  TextStyle,\n  ViewStyle,\n} from 'react-native';\nimport type {\n  ScreenProps,\n  ScreenStackHeaderConfigProps,\n  SearchBarProps,\n} from 'react-native-screens';\n\nexport type NativeStackNavigationEventMap = {\n  /**\n   * Event which fires when a transition animation starts.\n   */\n  transitionStart: { data: { closing: boolean } };\n  /**\n   * Event which fires when a transition animation ends.\n   */\n  transitionEnd: { data: { closing: boolean } };\n};\n\nexport type NativeStackNavigationProp<\n  ParamList extends ParamListBase,\n  RouteName extends keyof ParamList = string,\n  NavigatorID extends string | undefined = undefined\n> = NavigationProp<\n  ParamList,\n  RouteName,\n  NavigatorID,\n  StackNavigationState<ParamList>,\n  NativeStackNavigationOptions,\n  NativeStackNavigationEventMap\n> &\n  StackActionHelpers<ParamList>;\n\nexport type NativeStackScreenProps<\n  ParamList extends ParamListBase,\n  RouteName extends keyof ParamList = string,\n  NavigatorID extends string | undefined = undefined\n> = {\n  navigation: NativeStackNavigationProp<ParamList, RouteName, NavigatorID>;\n  route: RouteProp<ParamList, RouteName>;\n};\n\nexport type NativeStackNavigationHelpers = NavigationHelpers<\n  ParamListBase,\n  NativeStackNavigationEventMap\n>;\n\n// We want it to be an empty object because navigator does not have any additional props\nexport type NativeStackNavigationConfig = {};\n\nexport type NativeStackHeaderProps = {\n  /**\n   * Options for the back button.\n   */\n  back?: {\n    /**\n     * Title of the previous screen.\n     */\n    title: string;\n  };\n  /**\n   * Options for the current screen.\n   */\n  options: NativeStackNavigationOptions;\n  /**\n   * Route object for the current screen.\n   */\n  route: Route<string>;\n  /**\n   * Navigation prop for the header.\n   */\n  navigation: NativeStackNavigationProp<ParamListBase>;\n};\n\nexport type HeaderButtonProps = {\n  /**\n   * Tint color for the header.\n   */\n  tintColor?: string;\n  /**\n   * Whether it's possible to navigate back in stack.\n   */\n  canGoBack: boolean;\n};\n\nexport type HeaderBackButtonProps = HeaderButtonProps & {\n  /**\n   * Label text for the button. Usually the title of the previous screen.\n   * By default, this is only shown on iOS.\n   */\n  label?: string;\n};\n\nexport type NativeStackNavigationOptions = {\n  /**\n   * String that can be displayed in the header as a fallback for `headerTitle`.\n   */\n  title?: string;\n  /**\n   * Function that given `HeaderProps` returns a React Element to display as a header.\n   */\n  header?: (props: NativeStackHeaderProps) => React.ReactNode;\n  /**\n   * Whether the back button is visible in the header.\n   * You can use it to show a back button alongside `headerLeft` if you have specified it.\n   *\n   * This will have no effect on the first screen in the stack.\n   *\n   * Only supported on iOS.\n   *\n   * @platform ios\n   */\n  headerBackVisible?: boolean;\n  /**\n   * Title string used by the back button on iOS.\n   * Defaults to the previous scene's title, or \"Back\" if there's not enough space.\n   * Use `headerBackTitleVisible: false` to hide it.\n   *\n   * Only supported on iOS.\n   *\n   * @platform ios\n   */\n  headerBackTitle?: string;\n  /**\n   * Whether the back button title should be visible or not.\n   *\n   * Only supported on iOS.\n   *\n   * @platform ios\n   */\n  headerBackTitleVisible?: boolean;\n  /**\n   * Style object for header back title. Supported properties:\n   * - fontFamily\n   * - fontSize\n   *\n   * Only supported on iOS.\n   *\n   * @platform ios\n   */\n  headerBackTitleStyle?: StyleProp<{\n    fontFamily?: string;\n    fontSize?: number;\n  }>;\n  /**\n   * Image to display in the header as the icon in the back button.\n   * Defaults to back icon image for the platform\n   * - A chevron on iOS\n   * - An arrow on Android\n   */\n  headerBackImageSource?: ImageSourcePropType;\n  /**\n   * Style of the header when a large title is shown.\n   * The large title is shown if `headerLargeTitle` is `true` and\n   * the edge of any scrollable content reaches the matching edge of the header.\n   *\n   * Supported properties:\n   * - backgroundColor\n   *\n   * Only supported on iOS.\n   *\n   * @platform ios\n   */\n  headerLargeStyle?: StyleProp<{\n    backgroundColor?: string;\n  }>;\n  /**\n   * Whether to enable header with large title which collapses to regular header on scroll.\n   *\n   * For large title to collapse on scroll, the content of the screen should be wrapped in a scrollable view such as `ScrollView` or `FlatList`.\n   * If the scrollable area doesn't fill the screen, the large title won't collapse on scroll.\n   * You also need to specify `contentInsetAdjustmentBehavior=\"automatic\"` in your `ScrollView`, `FlatList` etc.\n   *\n   * Only supported on iOS.\n   *\n   * @platform ios\n   */\n  headerLargeTitle?: boolean;\n  /**\n   * Whether drop shadow of header is visible when a large title is shown.\n   *\n   * Only supported on iOS.\n   *\n   * @platform ios\n   */\n  headerLargeTitleShadowVisible?: boolean;\n  /**\n   * Style object for large title in header. Supported properties:\n   * - fontFamily\n   * - fontSize\n   * - fontWeight\n   * - color\n   *\n   * Only supported on iOS.\n   *\n   * @platform ios\n   */\n  headerLargeTitleStyle?: StyleProp<{\n    fontFamily?: string;\n    fontSize?: number;\n    fontWeight?: string;\n    color?: string;\n  }>;\n  /**\n   * Whether to show the header. The header is shown by default.\n   * Setting this to `false` hides the header.\n   */\n  headerShown?: boolean;\n  /**\n   * Style object for header. Supported properties:\n   * - backgroundColor\n   */\n  headerStyle?: StyleProp<{\n    backgroundColor?: string;\n  }>;\n  /**\n   * Whether to hide the elevation shadow (Android) or the bottom border (iOS) on the header.\n   */\n  headerShadowVisible?: boolean;\n  /**\n   * Boolean indicating whether the navigation bar is translucent.\n   * Setting this to `true` makes the header absolutely positioned,\n   * and changes the background color to `transparent` unless specified in `headerStyle`.\n   */\n  headerTransparent?: boolean;\n  /**\n   * Blur effect for the translucent header.\n   * The `headerTransparent` option needs to be set to `true` for this to work.\n   *\n   * Only supported on iOS.\n   *\n   * @platform ios\n   */\n  headerBlurEffect?: ScreenStackHeaderConfigProps['blurEffect'];\n  /**\n   * Tint color for the header. Changes the color of back button and title.\n   */\n  headerTintColor?: string;\n  /**\n   * Function which returns a React Element to render as the background of the header.\n   * This is useful for using backgrounds such as an image, a gradient, blur effect etc.\n   * You can use this with `headerTransparent` to render content underneath a translucent header.\n   */\n  headerBackground?: () => React.ReactNode;\n  /**\n   * Function which returns a React Element to display on the left side of the header.\n   * This replaces the back button. See `headerBackVisible` to show the back button along side left element.\n   */\n  headerLeft?: (props: HeaderBackButtonProps) => React.ReactNode;\n  /**\n   * Function which returns a React Element to display on the right side of the header.\n   */\n  headerRight?: (props: HeaderButtonProps) => React.ReactNode;\n  /**\n   * String or a function that returns a React Element to be used by the header.\n   * Defaults to screen `title` or route name.\n   *\n   * When a function is passed, it receives `tintColor` and`children` in the options object as an argument.\n   * The title string is passed in `children`.\n   *\n   * Note that if you render a custom element by passing a function, animations for the title won't work.\n   */\n  headerTitle?:\n    | string\n    | ((props: {\n        /**\n         * The title text of the header.\n         */\n        children: string;\n        /**\n         * Tint color for the header.\n         */\n        tintColor?: string;\n      }) => React.ReactNode);\n  /**\n   * How to align the the header title.\n   * Defaults to `left` on platforms other than iOS.\n   *\n   * Not supported on iOS. It's always `center` on iOS and cannot be changed.\n   */\n  headerTitleAlign?: 'left' | 'center';\n  /**\n   * Style object for header title. Supported properties:\n   * - fontFamily\n   * - fontSize\n   * - fontWeight\n   * - color\n   */\n  headerTitleStyle?: StyleProp<\n    Pick<TextStyle, 'fontFamily' | 'fontSize' | 'fontWeight'> & {\n      color?: string;\n    }\n  >;\n  /**\n   * Options to render a native search bar.\n   * You also need to specify `contentInsetAdjustmentBehavior=\"automatic\"` in your `ScrollView`, `FlatList` etc.\n   * If you don't have a `ScrollView`, specify `headerTransparent: false`.\n   *\n   * Only supported on iOS and Android.\n   */\n  headerSearchBarOptions?: SearchBarProps;\n  /**\n   * Boolean indicating whether to show the menu on longPress of iOS >= 14 back button. Defaults to `true`.\n   * Requires `react-native-screens` version >=3.3.0.\n   *\n   * Only supported on iOS.\n   *\n   * @platform ios\n   */\n  headerBackButtonMenuEnabled?: boolean;\n  /**\n   * Whether the home indicator should prefer to stay hidden on this screen. Defaults to `false`.\n   *\n   * @platform ios\n   */\n  autoHideHomeIndicator?: boolean;\n  /**\n   * Sets the navigation bar color. Defaults to initial navigation bar color.\n   *\n   * @platform android\n   */\n  navigationBarColor?: string;\n  /**\n   * Sets the visibility of the navigation bar. Defaults to `false`.\n   *\n   * @platform android\n   */\n  navigationBarHidden?: boolean;\n  /**\n   * Sets the status bar animation (similar to the `StatusBar` component).\n   * Requires setting `View controller-based status bar appearance -> YES` (or removing the config) in your `Info.plist` file.\n   *\n   * Only supported on iOS.\n   *\n   * @platform ios\n   */\n  statusBarAnimation?: ScreenProps['statusBarAnimation'];\n  /**\n   * Sets the status bar color (similar to the `StatusBar` component). Defaults to initial status bar color.\n   *\n   * @platform android\n   */\n  statusBarColor?: string;\n  /**\n   * Whether the status bar should be hidden on this screen.\n   * Requires setting `View controller-based status bar appearance -> YES` in your Info.plist file.\n   *\n   * Only supported on iOS.\n   *\n   * @platform ios\n   */\n  statusBarHidden?: boolean;\n  /**\n   * Sets the status bar color (similar to the `StatusBar` component).\n   * Requires setting `View controller-based status bar appearance -> YES` (or removing the config) in your `Info.plist` file.\n   *\n   * Only supported on iOS.\n   *\n   * @platform ios\n   */\n  statusBarStyle?: ScreenProps['statusBarStyle'];\n  /**\n   * Sets the translucency of the status bar. Defaults to `false`.\n   *\n   * @platform android\n   */\n  statusBarTranslucent?: boolean;\n  /**\n   * Sets the direction in which you should swipe to dismiss the screen.\n   * When using `vertical` option, options `fullScreenGestureEnabled: true`, `customAnimationOnGesture: true` and `animation: 'slide_from_bottom'` are set by default.\n   *\n   * Supported values:\n   * - `vertical` – dismiss screen vertically\n   * - `horizontal` – dismiss screen horizontally (default)\n   *\n   * @platform ios\n   */\n  gestureDirection?: ScreenProps['swipeDirection'];\n  /**\n   * Style object for the scene content.\n   */\n  contentStyle?: StyleProp<ViewStyle>;\n  /**\n   * Whether the gesture to dismiss should use animation provided to `animation` prop. Defaults to `false`.\n   *\n   * Doesn't affect the behavior of screens presented modally.\n   *\n   * @platform ios\n   */\n  customAnimationOnGesture?: boolean;\n  /**\n   * Whether the gesture to dismiss should work on the whole screen. Using gesture to dismiss with this option results in the same\n   * transition animation as `simple_push`. This behavior can be changed by setting `customAnimationOnGesture` prop. Achieving the\n   * default iOS animation isn't possible due to platform limitations. Defaults to `false`.\n   *\n   * Doesn't affect the behavior of screens presented modally.\n   *\n   * @platform ios\n   */\n  fullScreenGestureEnabled?: boolean;\n  /**\n   * Whether you can use gestures to dismiss this screen. Defaults to `true`.\n   *\n   * Only supported on iOS.\n   *\n   * @platform ios\n   */\n  gestureEnabled?: boolean;\n  /**\n   * The type of animation to use when this screen replaces another screen. Defaults to `pop`.\n   *\n   * Supported values:\n   * - \"push\": the new screen will perform push animation.\n   * - \"pop\": the new screen will perform pop animation.\n   *\n   * Only supported on iOS and Android.\n   */\n  animationTypeForReplace?: ScreenProps['replaceAnimation'];\n  /**\n   * How the screen should animate when pushed or popped.\n   *\n   * Supported values:\n   * - \"default\": use the platform default animation\n   * - \"fade\": fade screen in or out\n   * - \"flip\": flip the screen, requires presentation: \"modal\" (iOS only)\n   * - \"simple_push\": use the platform default animation, but without shadow and native header transition (iOS only)\n   * - \"slide_from_bottom\": slide in the new screen from bottom\n   * - \"slide_from_right\": slide in the new screen from right (Android only, uses default animation on iOS)\n   * - \"slide_from_left\": slide in the new screen from left (Android only, uses default animation on iOS)\n   * - \"none\": don't animate the screen\n   *\n   * Only supported on iOS and Android.\n   */\n  animation?: ScreenProps['stackAnimation'];\n  /**\n   * Changes the duration (in milliseconds) of `slide_from_bottom`, `fade_from_bottom`, `fade` and `simple_push` transitions on iOS. Defaults to `350`.\n   * The duration of `default` and `flip` transitions isn't customizable.\n   *\n   * @platform ios\n   */\n  animationDuration?: number;\n  /**\n   * How should the screen be presented.\n   *\n   * Supported values:\n   * - \"card\": the new screen will be pushed onto a stack, which means the default animation will be slide from the side on iOS, the animation on Android will vary depending on the OS version and theme.\n   * - \"modal\": the new screen will be presented modally. this also allows for a nested stack to be rendered inside the screen.\n   * - \"transparentModal\": the new screen will be presented modally, but in addition, the previous screen will stay so that the content below can still be seen if the screen has translucent background.\n   * - \"containedModal\": will use \"UIModalPresentationCurrentContext\" modal style on iOS and will fallback to \"modal\" on Android.\n   * - \"containedTransparentModal\": will use \"UIModalPresentationOverCurrentContext\" modal style on iOS and will fallback to \"transparentModal\" on Android.\n   * - \"fullScreenModal\": will use \"UIModalPresentationFullScreen\" modal style on iOS and will fallback to \"modal\" on Android.\n   * - \"formSheet\": will use \"UIModalPresentationFormSheet\" modal style on iOS and will fallback to \"modal\" on Android.\n   *\n   * Only supported on iOS and Android.\n   */\n  presentation?: Exclude<ScreenProps['stackPresentation'], 'push'> | 'card';\n  /**\n   * The display orientation to use for the screen.\n   *\n   * Supported values:\n   * - \"default\" - resolves to \"all\" without \"portrait_down\" on iOS. On Android, this lets the system decide the best orientation.\n   * - \"all\": all orientations are permitted.\n   * - \"portrait\": portrait orientations are permitted.\n   * - \"portrait_up\": right-side portrait orientation is permitted.\n   * - \"portrait_down\": upside-down portrait orientation is permitted.\n   * - \"landscape\": landscape orientations are permitted.\n   * - \"landscape_left\": landscape-left orientation is permitted.\n   * - \"landscape_right\": landscape-right orientation is permitted.\n   *\n   * Only supported on iOS and Android.\n   */\n  orientation?: ScreenProps['screenOrientation'];\n  /**\n   * Whether inactive screens should be suspended from re-rendering. Defaults to `false`.\n   * Defaults to `true` when `enableFreeze()` is run at the top of the application.\n   * Requires `react-native-screens` version >=3.16.0.\n   *\n   * Only supported on iOS and Android.\n   */\n  freezeOnBlur?: boolean;\n};\n\nexport type NativeStackNavigatorProps = DefaultNavigatorOptions<\n  ParamListBase,\n  StackNavigationState<ParamListBase>,\n  NativeStackNavigationOptions,\n  NativeStackNavigationEventMap\n> &\n  StackRouterOptions &\n  NativeStackNavigationConfig;\n\nexport type NativeStackDescriptor = Descriptor<\n  NativeStackNavigationOptions,\n  NativeStackNavigationProp<ParamListBase>,\n  RouteProp<ParamListBase>\n>;\n\nexport type NativeStackDescriptorMap = {\n  [key: string]: NativeStackDescriptor;\n};\n"],"mappings":""}