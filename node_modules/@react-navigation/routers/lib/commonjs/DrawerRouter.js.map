{"version":3,"names":["DrawerActions","TabActions","openDrawer","type","closeDrawer","toggleDrawer","DrawerRouter","defaultStatus","rest","router","TabRouter","isDrawerInHistory","state","Boolean","history","some","it","addDrawerToHistory","status","removeDrawerFromHistory","filter","getInitialState","routeNames","routeParamList","routeGetIdList","default","stale","key","nanoid","getRehydratedState","partialState","getStateForRouteFocus","result","getStateForAction","action","options","index","actionCreators"],"sources":["DrawerRouter.tsx"],"sourcesContent":["import { nanoid } from 'nanoid/non-secure';\n\nimport TabRouter, {\n  TabActionHelpers,\n  TabActions,\n  TabActionType,\n  TabNavigationState,\n  TabRouterOptions,\n} from './TabRouter';\nimport type {\n  CommonNavigationAction,\n  ParamListBase,\n  PartialState,\n  Router,\n} from './types';\nexport type DrawerStatus = 'open' | 'closed';\n\nexport type DrawerActionType =\n  | TabActionType\n  | {\n      type: 'OPEN_DRAWER' | 'CLOSE_DRAWER' | 'TOGGLE_DRAWER';\n      source?: string;\n      target?: string;\n    };\n\nexport type DrawerRouterOptions = TabRouterOptions & {\n  defaultStatus?: DrawerStatus;\n};\n\nexport type DrawerNavigationState<ParamList extends ParamListBase> = Omit<\n  TabNavigationState<ParamList>,\n  'type' | 'history'\n> & {\n  /**\n   * Type of the router, in this case, it's drawer.\n   */\n  type: 'drawer';\n  /**\n   * Default status of the drawer.\n   */\n  default: DrawerStatus;\n  /**\n   * List of previously visited route keys and drawer open status.\n   */\n  history: (\n    | { type: 'route'; key: string }\n    | { type: 'drawer'; status: DrawerStatus }\n  )[];\n};\n\nexport type DrawerActionHelpers<ParamList extends ParamListBase> =\n  TabActionHelpers<ParamList> & {\n    /**\n     * Open the drawer sidebar.\n     */\n    openDrawer(): void;\n\n    /**\n     * Close the drawer sidebar.\n     */\n    closeDrawer(): void;\n\n    /**\n     * Open the drawer sidebar if closed, or close if opened.\n     */\n    toggleDrawer(): void;\n  };\n\nexport const DrawerActions = {\n  ...TabActions,\n  openDrawer(): DrawerActionType {\n    return { type: 'OPEN_DRAWER' };\n  },\n  closeDrawer(): DrawerActionType {\n    return { type: 'CLOSE_DRAWER' };\n  },\n  toggleDrawer(): DrawerActionType {\n    return { type: 'TOGGLE_DRAWER' };\n  },\n};\n\nexport default function DrawerRouter({\n  defaultStatus = 'closed',\n  ...rest\n}: DrawerRouterOptions): Router<\n  DrawerNavigationState<ParamListBase>,\n  DrawerActionType | CommonNavigationAction\n> {\n  const router = TabRouter(rest) as unknown as Router<\n    DrawerNavigationState<ParamListBase>,\n    TabActionType | CommonNavigationAction\n  >;\n\n  const isDrawerInHistory = (\n    state:\n      | DrawerNavigationState<ParamListBase>\n      | PartialState<DrawerNavigationState<ParamListBase>>\n  ) => Boolean(state.history?.some((it) => it.type === 'drawer'));\n\n  const addDrawerToHistory = (\n    state: DrawerNavigationState<ParamListBase>\n  ): DrawerNavigationState<ParamListBase> => {\n    if (isDrawerInHistory(state)) {\n      return state;\n    }\n\n    return {\n      ...state,\n      history: [\n        ...state.history,\n        {\n          type: 'drawer',\n          status: defaultStatus === 'open' ? 'closed' : 'open',\n        },\n      ],\n    };\n  };\n\n  const removeDrawerFromHistory = (\n    state: DrawerNavigationState<ParamListBase>\n  ): DrawerNavigationState<ParamListBase> => {\n    if (!isDrawerInHistory(state)) {\n      return state;\n    }\n\n    return {\n      ...state,\n      history: state.history.filter((it) => it.type !== 'drawer'),\n    };\n  };\n\n  const openDrawer = (\n    state: DrawerNavigationState<ParamListBase>\n  ): DrawerNavigationState<ParamListBase> => {\n    if (defaultStatus === 'open') {\n      return removeDrawerFromHistory(state);\n    }\n\n    return addDrawerToHistory(state);\n  };\n\n  const closeDrawer = (\n    state: DrawerNavigationState<ParamListBase>\n  ): DrawerNavigationState<ParamListBase> => {\n    if (defaultStatus === 'open') {\n      return addDrawerToHistory(state);\n    }\n\n    return removeDrawerFromHistory(state);\n  };\n\n  return {\n    ...router,\n\n    type: 'drawer',\n\n    getInitialState({ routeNames, routeParamList, routeGetIdList }) {\n      const state = router.getInitialState({\n        routeNames,\n        routeParamList,\n        routeGetIdList,\n      });\n\n      return {\n        ...state,\n        default: defaultStatus,\n        stale: false,\n        type: 'drawer',\n        key: `drawer-${nanoid()}`,\n      };\n    },\n\n    getRehydratedState(\n      partialState,\n      { routeNames, routeParamList, routeGetIdList }\n    ) {\n      if (partialState.stale === false) {\n        return partialState;\n      }\n\n      let state = router.getRehydratedState(partialState, {\n        routeNames,\n        routeParamList,\n        routeGetIdList,\n      });\n\n      if (isDrawerInHistory(partialState)) {\n        // Re-sync the drawer entry in history to correct it if it was wrong\n        state = removeDrawerFromHistory(state);\n        state = addDrawerToHistory(state);\n      }\n\n      return {\n        ...state,\n        default: defaultStatus,\n        type: 'drawer',\n        key: `drawer-${nanoid()}`,\n      };\n    },\n\n    getStateForRouteFocus(state, key) {\n      const result = router.getStateForRouteFocus(state, key);\n\n      return closeDrawer(result);\n    },\n\n    getStateForAction(state, action, options) {\n      switch (action.type) {\n        case 'OPEN_DRAWER':\n          return openDrawer(state);\n\n        case 'CLOSE_DRAWER':\n          return closeDrawer(state);\n\n        case 'TOGGLE_DRAWER':\n          if (isDrawerInHistory(state)) {\n            return removeDrawerFromHistory(state);\n          }\n\n          return addDrawerToHistory(state);\n\n        case 'JUMP_TO':\n        case 'NAVIGATE': {\n          const result = router.getStateForAction(state, action, options);\n\n          if (result != null && result.index !== state.index) {\n            return closeDrawer(result as DrawerNavigationState<ParamListBase>);\n          }\n\n          return result;\n        }\n\n        case 'GO_BACK':\n          if (isDrawerInHistory(state)) {\n            return removeDrawerFromHistory(state);\n          }\n\n          return router.getStateForAction(state, action, options);\n\n        default:\n          return router.getStateForAction(state, action, options);\n      }\n    },\n\n    actionCreators: DrawerActions,\n  };\n}\n"],"mappings":"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"}